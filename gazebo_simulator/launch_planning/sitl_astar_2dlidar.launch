<launch>

    <!-- 运行前确认地图大小、无人机初始位置、激光雷达感知范围、环境world文件、是否改的是真正的record_trajectory.py -->

    <!-- Launch Gazebo Simulation -->
    <arg name="x" default="-45.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.2"/>
	<arg name="world" default="$(find prometheus_gazebo)/worlds/AstarDRL/test_env2.world"/>
	<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/p450_hokuyo_2Dlidar/p450_hokuyo_2Dlidar.sdf"/>
	<arg name="model" default="p450_hokuyo_2Dlidar"/>
    <include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
	  <arg name="world" value="$(arg world)"/>
	  <arg name="sdf" value="$(arg sdf)"/>
	  <arg name="model" value="$(arg model)"/>
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
    </include>

	<!-- run the laser_to_pointcloud -->
    <node pkg="prometheus_gazebo" type="laser_to_pointcloud.py" name="laser_to_pointcloud" >
    </node>

    <!-- 启动octomap建图 -->
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="0.1" />
        <!-- 发布地图的坐标系 -->
        <param name="frame_id" type="string" value="world" />
        <!-- 传感器最大感知范围 (speedup!) -->
        <!-- 要和传感器模型hokuyo_ust_20lx.sdf中参数对应 -->
        <param name="sensor_model/max_range" value="50.0" />
        <!-- 局部点云输入 -->
        <remap from="cloud_in" to="/prometheus/sensors/pcl2" />
    </node>

    <!-- 启动全局规划算法 -->
    <arg name="topic_of_global_pcl" default="/octomap_point_cloud_centers"/>
    <node pkg="prometheus_global_planning" name="global_planner_main" type="global_planner_main" output="screen" launch-prefix="gnome-terminal --">
        <remap from="/prometheus/global_planning/global_pcl" to="$(arg topic_of_global_pcl)" />
        <!-- 参数 -->
        <!-- 二维平面规划 -->
        <param name="global_planner/is_2D" value="true" type="bool"/>
        <!-- ２维高度，建议与起飞高度一致 -->
        <param name="global_planner/fly_height_2D" value="1.0" type="double"/>
        <!-- 停止距离 -->
        <param name="global_planner/safe_distance" value="0.01" type="double"/>
        <param name="global_planner/time_per_path" value="1.0" type="double"/>
        <param name="global_planner/replan_time" value="2.0" type="double"/>
        <param name="global_planner/map_input" value="0" type="int"/>
        <param name="global_planner/sim_mode" value="true" type="bool"/>
        <!-- 最大搜索步数10000 -->
        <param name="astar/allocate_num" value="10000" type="int"/>
        <!-- 启发式函数系数 -->
        <param name="astar/lambda_heu" value="2.0" type="double"/>
        <!-- 分辨率 -->
        <param name="map/resolution" value="0.1" type="double"/>
        <!-- 障碍物膨胀距离 -->
        <!-- 为飞机的轴距即可(是否需要设置成奖励函数中的d_safe) 0.4-->
        <param name="map/inflate" value="1.0" type="double"/>
        <!-- 地图范围，原值为"-15.0" "-15.0" "-0.5" "30.0" "30.0" "3.0" -->
        <param name="map/origin_x" value="-50.0" type="double"/>
        <param name="map/origin_y" value="-50.0" type="double"/>
        <param name="map/origin_z" value="-0.5" type="double"/>
        <param name="map/map_size_x" value="100.0" type="double"/>
        <param name="map/map_size_y" value="100.0" type="double"/>
        <param name="map/map_size_z" value="3.0" type="double"/>
    </node>
    
	<!-- 启动rviz,设为false可关闭 -->
	<arg name="visualization" default="true"/>
	<group if="$(arg visualization)">
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_config_astar.rviz" />
        <!-- 真实点云 -->
        <!-- <node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
		    <param name="pcd_path" type="string" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	    </node> -->
    </group>

    <!-- 记录轨迹 -->
    <node pkg="prometheus_gazebo" type="record_trajectory.py" name="record_trajectory" output="screen">
    </node>

</launch>

